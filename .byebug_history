c
reload!
product_ids.map(&:product_id)
product_ids.count
product_ids.pluck(:product_id)
product_ids.first.product_id
product_ids.first
c
product_ids.first
q
c
q
products.count
c
keywords
keywords.first
keywords
products.count
c
    SQL
        ) AS matches ON matches.product_id = products.id
            COUNT(*) = ?
          HAVING
            product_id
          GROUP BY
            tag_names.name IN (?)
          WHERE
            tag_names ON tags.tag_name_id = tag_names.id
          JOIN
            tags
          FROM
            product_id
          SELECT
        (
      JOIN
        products
      FROM
        *
      SELECT
products = Product.find_by_sql([<<-SQL, keywords, keywords.count])
products
c
params
n
extras
n
keywords
n
keywords
n
options
c
continue
c
TagName.new(name: params[:keywords_arr].first)
tag_ids.has_key?(params[:keywords_arr].first)
tag_ids.has_key?(params[:keywords_arr].first
params[:keywords_arr].each { |i| puts i }
n
c
n
params[:keywords_arr]
params
n
c
params
n
counts
n
counts
n
c
params
c
prc.call({ name: "test product", keywords_hs: {test: true, product: true}, keywords_arr: ["test", "product"], keywords_jsonb: {test: true, product: true} })
               keywords_jsonb: {test: true, product: true}
               keywords_arr: ["test", "product"],
               keywords_hs: {test: true, product: true},
prc.call({ name: "test product",
prc
c
DOWN_SB_BRANDS
c
Product.select_products_by_tag("North", "15")
Product.get_test_keywords
c
Product.get_test_keywords
self.class
self
c
DOWN_SB_BRANDS
c
DOWN_SB_BRANDS
c
tag_name.first
tag_name.id
tag_name = TagName.retrieve_tag_name(kw)
tag_name.id
tag_name
tag_name = TagName.retrieve_tag_name(kw)
c
tag_name = TagName.retrieve_tag_name(kw)
tag_name.id
TagName.retrieve_tag_name(kw)
kw
c
COLORS
COLORS.shuffle.take(4)
x = COLORS
COLORS
c
x = colors_list
x = color_list
c
random_name
c
random_name
c
DOWN_SB_BRANDS
c
down_sb_brands
c
n
tag_name.id
tag_name
c
args
